1) Create a simple SQS queue.

2) Create a Dynamodb table.

3) Create a lambda function.
- Choose Author from Scratch.
- Click on ‘Change default execution role’ under ‘Permissions’ section
- Create a new role from AWS policy templates:- 'Simple microservice permissions' & 'Amazon SQS poller permissions'
- Create function

3) Now inside the lambda function, paste your code for the tasks you want to perform.

4) Go back to the SQS Console again and click on the queue created eariler -> Click on ‘Lambda Triggers’ -> Click on ‘Configure Lambda function trigger’ -> Select the lambda function which was created earlier -> Save

5) Now if any message comes to SQS, it will go to DynamoDB table via the lambda function.


- To check this go to lambda console and click on the ‘Monitor’ tab. Then click on the ‘View logs in CloudWatch’ button.

- We can also get the messages from Amazon SNS by subscribing to a SNS topic from our SQS queue.


VIDEO LINK:- https://www.youtube.com/watch?v=y57oIlK9mHc	 



			
			Node js code for Lambda for SQS to Dynamodb:---->

const aws = require('aws-sdk');

// initialise dynamoDB client
const dynamoDB = new aws.DynamoDB.DocumentClient({
    region:'us-east-1',
    apiVersion:'2012-08-10'
});

exports.handler = async (event) => {
  try{
      
      console.log('event: ', event);
      
      // event has propety called "Records"
      const { Records } = event;
      
      // parse the message into json object:
      const body = JSON.parse(Records[0].body); 
      
      // logs the body which is message
      console.log("Incoming message body from SQS :", body); 
          
       const params = {
           TableName:'test-dynamo-table1',
            Item: {
               userId : body.userId,
               name : body.name,
               age : body.age
           } 
       };
      
       // write data to dynamo DB:
       await dynamoDB.put(params).promise();
      
       console.log('Successfully written to DynamoDB');
     
  } catch(error){     
      console.error('Error in executing lambda: ', error);
      return {"statusCode": 500, "message:": "Error while execution"};
  }
};
